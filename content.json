{"pages":[],"posts":[{"title":"ブログを開設","text":"ブログを開設。一応、サンプル。 モチベーション ここでは、日々蓄積される（本当に蓄積されるはずだ！）ナレッジやデータを書き留めるための、一種の備忘録、あるいは、記録として機能することになる。したがって、出来るだけサクサク書くことが出来ることが望ましい。もっと言えば、体裁の細かな微調整などに余計な神経をもっていかれたくない .. という思惑があって、もちろん、デザイン的な観点で言えば、そういうわけにもいかないことは重々理解をしている。 そうではなく、より本質にスコープしてここの記事を書いていくということが大きな目的でもある。そういうわけで、ストレスフリーにさらっと書き進めるためには、現状では Markdown 一択という選択から始めた。 いまは、CMSも多岐に渡り、高機能の恩恵を受けることが可能だが、本当は、もっとシンプルに簡単に意見を発信できれば、もっと便利なはずだ。そこで、そもそも静的なサイト（データそのもの）を記述することが出来れば、目的と合致する。 実際、世の中はある意味では原点回帰のようなことも起こっている。Wordpress や Drupal のようなかなり優秀なCMSでサイトを運営する方向と、インターネット黎明期のような静的サイトへの回帰。後者は非常におもしろい分野へと変化してきている。これは、ある意味、Jam Stack分野への回帰としても捉えることが出来るだろう。たとえば、データベースがバックエンドに存在しなければ、そもそもセキュリティ面でのアドバンテージを稼ぐことが、非常にシンプルになり得る。同時に、更新の手間暇の煩雑さからの開放という点でも大きな効果が得られる。という動機付けのもとに、この備忘録は、Hexoというパッケージでサイトを構築し、その結果をGithubでホストしている。ブログは、Githubの中の GitPages でホストされるというしくみをとっている。 執筆環境は Visual Studio Code から、HexoパッケージをインストールしたLinuxサーバへSSHで接続してMarkdownを快適に書き進めることが出来るようなイメージ。 プラットホーム自体は、Node.js があれば、さくっと立ち上がるものでもあるが、そのしくみも含めて構築手順書的な観点で、あるいは、備忘録という意味で、本サイトを公開するまでの流れを書いておく。 Quick Start1、hexo環境の構築 すでにNode環境があれば別だが、今回は Docker でオートメーションを達成したい。あるいは、地道に環境を構築してもまったく構わない。その際、OSは Windows, Mac, Linux を問わない。Nodeの実行環境が手に入ればプラットホームは問わない。 以下に、Dockerfile の内容を示す。 1234567891011121314151617181920212223242526272829303132333435363738394041FROM ubuntu:16.04# proxy ここは必要に応じて#ENV https_proxy=\"http://name:password@proxy:8080/\"#ENV http_proxy=\"http://name:password@proxy:8080/\"# OpenSSHRUN apt-get update &amp;&amp; apt-get install -y \\ openssh-serverRUN mkdir /var/run/sshdRUN echo 'root:root' | chpasswdRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config# SSH ログインRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshdENV NOTVISIBLE \"in users profile\"RUN echo \"export VISIBLE=now\" &gt;&gt; /etc/profile# 一般ユーザを作成して、Node.jsのリポジトリからステーブルを選択してインストールRUN apt-get install -y git less vim sudoRUN apt-get install -y nodejs npmRUN npm install n -gRUN n stableRUN apt purge -y nodejs npmRUN n 11.2.0RUN useradd -m aandeRUN echo 'aande:aande' | chpasswdRUN usermod -aG sudo aandeRUN chsh -s /bin/bash aande# HexoRUN npm install -g \\ hexo-cliRUN npm install \\ hexo-deployer-git --save \\ hexo-admin --save# SSH、Webサーバ、Adminサーバ公開用のポートEXPOSE 22 4000 8080CMD [\"/usr/sbin/sshd\", \"-D\"] 今回は、OSに Ubuntu16.04 を指定した。簡単に解説を加えると、はじめのレイヤーでOpenSSHのインストールとroot権限を設定している。 Dockerの特性として何層かのレイヤーでビルドを積むことにあるので、細かく（あまり細かすぎても、あるいは、薄すぎても別の弊害を生みが …）層を重ねることによりビルド時間の短縮効果を得ることが出来る。次に、Node.jsをセットアップしている。ここでインストールしている Node.js, npm の目的は、パッケージマネージャを通じて n package を導入することにある。Windowsで言えば nodist のような役割で、これによりどのバージョンの Node.js をインストールして使用するか、を選択可能としている。 事前の調査で現在の Node.js の Stable/LTS を確認して、バージョンを選択してインストールしている。ここまでのコードの実行後は、目的の Node.js がインストールされたので、事前にインストールした（つまり、n package を導入することを目的とした）バージョンは削除している。もちろん削除しなくても構わない。とくに環境汚染（実際に汚染があるわけではないが）の類の問題に関してナーバスな方は、きれいしに整理したほうがよいことは言うまでもない。 ここで、n package の説明を簡単に。別のバージョンの Node.js のインストール、管理がシンプルになるので、そういった目的の場合は、以下のコマンドを実行する。 1234567891011$ sudo n 10.12.0$ node -vv10.12.0# 上記のコマンド実行により、バージョン 10.12.0 に切り替わった。 # また、エイリアスも使用できる。# 下記は、LTSの選択。$ sudo n lts$ node -vv10.15.3 さて、話が横道に逸れてしまったが、元に戻す。次に一般ユーザの設定をして、次が本筋の Hexo のインストール。hexo-cli をグローバルインストールをして、続いて Githubデプロイ用に必要な hexo-deployer-git をインストールしている。もちろん、gitコマンドでデプロイ（というか、Push）するのであれば、それでも構わない。次にセットアップする hexo-admin は、ブログの作成をブラウザ上から実行出来るようにするための、いわゆるダッシュボードのようなもので、無理にインストールする必要はない。今回も、記事の作成は、Visual Studio Code でサクサク … というのが主目的なので、使用する予定はない。ただ、一応、関連パッケージということで紹介をしてみた。 最後にポートを export しているが、これは言うまでもなく、SSH用に22番、ブログ表示を4000番（つまり、デバッグ用の … というか、ローカル表示確認用のWebサーバ役と、前段で説明したダッシュボード表示のために8080番を開けている。Dockerfileに関する説明は以上。 次いで、上記の Dockerfile に基づいて、Dockerイメージをビルドする。イメージの名前は任意。 1$ docker build -t ssh-node-sandbox:latest . 出来上がったイメージからコンテナを生成する。 123$ docker run -d \\ -p 20022:22 -p 4000:4000 -p 8080:8080 \\ --name ssh-hexo-blogger ssh-node-sandbox これで dockerコンテナが起動した。実行されているか見てみよう。 123$ docker psb3436e362b47 ssh-node-sandbox &quot;/usr/sbin/sshd -D&quot; 26 hours ago Up 2 hours 0.0.0.0:4000-&gt;4000/tcp, 0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:20022-&gt;22/tcp ssh-hexo-blogger OK！ では、さっそくコンテナにSSHで入ってブログサイトを構築してみるが、その前に Visual Studio Code にSSHの拡張プラグインをセットアップする。もちろん、ほかのSSHクライアントで接続してLinux上のVimなどのエディタを使用しても構わないが、ここは、Visual Studio Code の快適さを選択したい。選択したのは SSH FS を使用する。 2、ブログサイトの構築コンテナに入ったら、以下の手続きでブログサイトを構築する。 12345678910# 任意のディレクトリに移動して、そこをワークスペースとする。# ここから Hexoコマンドを実行して、ブログサイトを構築する。$ hexo init blog# 最後の blog がサイト名となる。もちろん任意でOK。# 作成したサイト用ディレクトリに移動する。$ cd blog# ここで、ディレクトリ内のオーダーを見ると package.json があるはずなので、その中にリストされているライブラリを導入する。やり方は簡単だ。以下の1行のコマンドを実行するのみ。$ npm install これで、ブログサイトの雛形が展開された。さっそく記事を書いてみる。 3、記事の作成1$ hexo new &quot;記事の名前&quot; 上の記事の名前は任意。ページのテンプレートが作成されたので、おもむろに記事を書く。記事を書き上げたら、以下のコマンドでサーバを起動する。 1$ hexo server これで、ローカル環境で書いた記事を確認出来る。ブラウザで localhost:4000 にアクセスする。いま、書き上げた記事が表示されるはずだ。dockerのホストに docker-machine を使用している場合は、おそらく、192.168.99.100:4000 のようなアドレスになるはずなので、ここはケアレスミスのポイント。慌てずに確認。この部分は、dockerのホストが何であれ、WindowsもMac, あるいは Linux でも変わりはない。 どうだろうか？これで簡単にブログサイトを、ローカル環境ではあるが構築出来てしまった。これだけでも簡単に目的が達成できたことが実感出来るだろう。しかし、ここまでが前段で、残りのデプロイがある。 4、デプロイ最後のプロセスまで辿り着いた。まずは、以下のコマンドを初期に覚えておくとよいかもしれない。 はじめは、以下の generate コマンド。 123$ hexo generate# または$ hexo g これは公開用のリソースを、asset も含めて publicフォルダ に生成するためのコマンド。 つまり、HTMLコードや公開に必要な画像などのファイル群、あるいは css なども含めて、出力される。このHexoソリューションのディレクトリ構成を見ると、いま作成中のドキュメントは source 配下のサブフォルダに存在するはずだ。このソースがビルドされた後、publicフォルダに公開用の静的セットとして生成されるというしくみだ。上記の generate コマンドの実行をすると、コンソールにその結果が出力されるので確認は容易だ。 さて、最後のコマンド。deploy。 123$ hexo deploy# または$ hexo d 今回想定している Github リポジトリに公開用ファイルがデプロイされる。そして、Github の当該リポジトリにアクセスをして、Settingsタブを選択する。その後、画面を下のほうにスクロールして、Github Pages の項目を見つければ、そこにたったいまデプロイしたブログのURLが設定されている。そこをクリックすると、結果を表示出来る。これですべてが完了だ。 ここまでの作業を長々と説明を加えてきたが、手順をしっかり踏めば、おそらく10分程度でサイト公開までは辿り着けるはずだ。もちろん記事を書く時間は除外する。つまり、記事を書くのが本質であって、それ以外にはなるべくサクッとすませたいというのが今回の狙いでした。 Best Regards; 今週気になったニュース■ PLCの未来像を描く「PLCnext」、用途別アプリなどを順調に拡大 - ハノーバーメッセ2019ラダー言語を用いることが多い PLC だが、Visual Studio、Eclipse、MATLAB/Simulink、PC Worx Engineerなどのツールの活用に加え、C#などの活用も進みそうだ。かつ、オープンプラットフォームで制御領域の拡大にも一気に貢献しそうな気配でもある。","link":"/2019/04/23/2019-04-3rdweek/"}],"tags":[],"categories":[]}